#!/usr/bin/env python3
"""
Average Embeddings Processing Script

This script processes TSV files containing embeddings generated by embeddings.py and:
1. Averages all embedding columns (emb_0 to emb_4095) for each file
2. Extracts sample IDs from filenames (e.g., filtered_0CC7ANPB_embeddings.tsv -> 0CC7ANPB)
3. Combines all averaged embeddings into a single TSV file

Usage:
    python average_embeddings.py [input_directory] [output_file]
"""

import logging
import re
import sys
from pathlib import Path
from typing import Dict, Optional

import pandas as pd

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def extract_sample_id(filename: str) -> str:
    """
    Extract sample ID from embedding file name
    
    Args:
        filename: Name of the embedding file (e.g., 'filtered_0CC7ANPB_embeddings.tsv')
        
    Returns:
        Sample ID (e.g., '0CC7ANPB')
    """
    # Remove .tsv extension
    name_without_ext = filename.replace('.tsv', '')
    
    # Pattern to match: filtered_{ID}_embeddings or {ID}_embeddings
    patterns = [
        r'filtered_(.+)_embeddings',  # filtered_ID_embeddings
        r'(.+)_embeddings',           # ID_embeddings (fallback)
    ]
    
    for pattern in patterns:
        match = re.match(pattern, name_without_ext)
        if match:
            return match.group(1)
    
    # If no pattern matches, use the filename without _embeddings suffix
    if name_without_ext.endswith('_embeddings'):
        return name_without_ext[:-11]  # Remove '_embeddings'
    
    return name_without_ext


def load_and_average_embeddings(file_path: str) -> Optional[Dict[str, float]]:
    """
    Load embeddings from TSV file and calculate column averages
    
    Args:
        file_path: Path to the TSV file containing embeddings
        
    Returns:
        Dictionary with averaged embedding values, or None if error
    """
    try:
        # Load the TSV file
        df = pd.read_csv(file_path, sep='\t')
        logger.info(f"Loaded {len(df)} sequences from {file_path}")
        
        # Find embedding columns (emb_0 to emb_4095)
        embedding_cols = [col for col in df.columns if col.startswith('emb_')]
        
        if not embedding_cols:
            logger.warning(f"No embedding columns found in {file_path}")
            return None
        
        # Calculate averages for each embedding column
        averaged_embeddings = {}
        for col in embedding_cols:
            if col in df.columns:
                averaged_embeddings[col] = df[col].mean()
        
        logger.info(f"Averaged {len(embedding_cols)} embedding dimensions")
        return averaged_embeddings
        
    except Exception as e:
        logger.error(f"Error processing {file_path}: {e}")
        return None


def process_embedding_directory(input_dir: str, output_file: str):
    """
    Process all embedding TSV files in a directory and create combined averaged file
    
    Args:
        input_dir: Directory containing embedding TSV files
        output_file: Path for the output combined TSV file
    """
    input_path = Path(input_dir)
    
    if not input_path.exists():
        logger.error(f"Input directory does not exist: {input_dir}")
        return
    
    # Find all embedding TSV files
    embedding_files = list(input_path.glob("*_embeddings.tsv"))
    logger.info(f"Found {len(embedding_files)} embedding files to process")
    
    if not embedding_files:
        logger.warning(f"No embedding files found in {input_dir}")
        return
    
    # Process each file
    combined_data = []
    
    for file_path in embedding_files:
        logger.info(f"Processing {file_path.name}...")
        
        # Extract sample ID
        sample_id = extract_sample_id(file_path.name)
        logger.info(f"Extracted sample ID: {sample_id}")
        
        # Load and average embeddings
        averaged_embeddings = load_and_average_embeddings(str(file_path))
        
        if averaged_embeddings is None:
            logger.warning(f"Skipping {file_path.name} due to processing error")
            continue
        
        # Create row for combined data
        row_data = {'sample_id': sample_id}
        row_data.update(averaged_embeddings)
        combined_data.append(row_data)
    
    if not combined_data:
        logger.error("No valid embedding files were processed")
        return
    
    # Create combined DataFrame
    combined_df = pd.DataFrame(combined_data)
    
    # Sort columns: sample_id first, then embedding columns in order
    embedding_cols = sorted([col for col in combined_df.columns if col.startswith('emb_')], 
                           key=lambda x: int(x.split('_')[1]))
    ordered_cols = ['sample_id'] + embedding_cols
    combined_df = combined_df[ordered_cols]
    
    # Sort by sample_id
    combined_df = combined_df.sort_values('sample_id')
    
    # Save to output file
    try:
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        combined_df.to_csv(output_file, sep='\t', index=False)
        logger.info(f"Saved combined averaged embeddings to {output_file}")
        logger.info(f"Combined file contains {len(combined_df)} samples with {len(embedding_cols)} embedding dimensions")
        
        # Display summary statistics
        logger.info("Summary statistics:")
        logger.info(f"  - Number of samples: {len(combined_df)}")
        logger.info(f"  - Number of embedding dimensions: {len(embedding_cols)}")
        logger.info(f"  - Sample IDs: {', '.join(combined_df['sample_id'].head(5).tolist())}" + 
                   (f", ... (+{len(combined_df)-5} more)" if len(combined_df) > 5 else ""))
        
    except Exception as e:
        logger.error(f"Error saving combined file: {e}")


def main():
    """Main function"""
    # Check command line arguments
    if len(sys.argv) < 3:
        print("Usage: python average_embeddings.py <input_directory> <output_file>")
        print()
        print("Arguments:")
        print("  input_directory   Directory containing embedding TSV files")
        print("  output_file       Path for the output combined TSV file")
        print()
        print("Example:")
        print("  python average_embeddings.py /path/to/embeddings/ combined_embeddings.tsv")
        sys.exit(1)
    
    input_dir = sys.argv[1]
    output_file = sys.argv[2]
    
    logger.info(f"Input directory: {input_dir}")
    logger.info(f"Output file: {output_file}")
    
    try:
        process_embedding_directory(input_dir, output_file)
        logger.info("Processing complete!")
    except Exception as e:
        logger.error(f"Processing failed: {e}")
        raise


if __name__ == "__main__":
    main()